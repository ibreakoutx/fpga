head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2012.10.22.16.35.25;	author vsananda;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@import mypkg::*;

class driver extends uvm_driver ;

`uvm_component_utils(driver)

virtual shiftreg_drv_intf #(.width(8)) drv ;
driver_channel drv_chan ;
logic [8:0] data ;
mailbox drv_mbox ;
heartbeat hbt ;

function new(string name, uvm_component parent);
      super.new(name,parent);
endfunction: new
  
  function void build_phase( uvm_phase phase);
      super.build_phase(phase);
      uvm_resource_db #(virtual shiftreg_drv_intf #(.width(8)) )::read_by_name("driver", "intf", drv,null);
      uvm_resource_db #(driver_channel)::read_by_name("driver", "channel", drv_chan,null);
      uvm_resource_db #(mailbox)::read_by_name("driver","mailbox",drv_mbox,null);
      uvm_resource_db #(heartbeat)::read_by_name("top","hbt",hbt,null);                  
  endfunction

function void connect_phase(uvm_phase phase) ;
      super.connect_phase(phase);
endfunction

  task main_phase(uvm_phase phase);
      fork
	 forever
	   begin
	      drv_mbox.get(data);
	      //drv_chan.get(data);	      
	      @@(drv.p_clk);
	      drv.valid_in = data[8] ;
	      drv.din = data[7:0];
	      hbt.tick();
	   end
      join_none
  endtask // reset_phase

endclass

@
